package Todo;

import com.panamahitek.ArduinoException;
import com.panamahitek.PanamaHitek_Arduino;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author karoe
 */
public class ControlArduino extends javax.swing.JFrame {
    PanamaHitek_Arduino ino =  new PanamaHitek_Arduino();
    List<String> puertosDis;
    XYSeriesCollection coleccion;
    XYSeries serieD,serieR;
    int referencia = 22;
    public ControlArduino() {
    initComponents();   
    List<String> ListaAingresar = ino.getSerialPorts();
     for (String ingresar : ListaAingresar) {
            puertosCB.addItem(ingresar);
        }
    coleccion =  new XYSeriesCollection();
    serieD= new XYSeries("Distancia");
    serieR= new XYSeries("Referencia");
    graficar();
    }
private void cambiarEstadoBueno(){
    
       estadoActual.setText("Conectado");
       estadoActual.setForeground(Color.GREEN);


    }
    private void cambiarEstadoFallido(){
    
       estadoActual.setText("Conexión fallida");
       estadoActual.setForeground(Color.RED);


    }
    private void graficar()
    {
       coleccion =  new XYSeriesCollection();
        coleccion.addSeries(serieD);
        coleccion.addSeries(serieR);
        JFreeChart grafico =  ChartFactory.createXYLineChart("Gráfica Distancia", "Tiempo(nanoSegundos)", "Distancia(cm)", coleccion, PlotOrientation.VERTICAL, true, false, false); 
        //grafico.addLegend();
        
        XYPlot plot  = grafico.getXYPlot();
        XYLineAndShapeRenderer render = new XYLineAndShapeRenderer(true, false);
        
        render.setSeriesPaint(0, Color.RED);
        render.setSeriesPaint(1, Color.green);
        render.setSeriesStroke(0, new BasicStroke(1.0f));
        render.setSeriesStroke(0, new BasicStroke(1.0f));
        plot.setRenderer(render);
        ChartPanel panelDeGrafico = new ChartPanel(grafico);
        panelDeGrafico.setMouseZoomable(true);
        panelDeGrafico.setPreferredSize(new Dimension(400,300)); //tamano
        
        grafica.setLayout(new BorderLayout());
        grafica.add(panelDeGrafico,BorderLayout.NORTH);
        
        grafica.revalidate();
        grafica.repaint();
        repaint();   
        
    }
    private SerialPortEventListener listener = new SerialPortEventListener() {
        @Override
        public void serialEvent(SerialPortEvent spe) {
            
            try {
                //ino.sendData("50\n");
                //ino.sendByte(14);
                //ino.sendData("1");
                if (ino.isMessageAvailable()) {
                    String distancia =ino.printMessage();
                    distanciaL.setText("Resultado: " + distancia );
                    serieD.add(System.nanoTime(), Double.parseDouble(distancia));
                    serieR.add(System.nanoTime(), referencia);
                    coleccion.removeAllSeries();
                    coleccion.addSeries(serieD); //Solo con que se cambie la coleccion se actualiza la grafica 
                    coleccion.addSeries(serieR);
                }
            } catch (SerialPortException | ArduinoException ex) {
                Logger.getLogger(ControlArduino.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    };
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        titulo = new javax.swing.JLabel();
        kpS = new javax.swing.JTextField();
        kiS = new javax.swing.JTextField();
        kdS = new javax.swing.JTextField();
        kp = new javax.swing.JLabel();
        ki = new javax.swing.JLabel();
        kd = new javax.swing.JLabel();
        puertos = new javax.swing.JLabel();
        puertosCB = new javax.swing.JComboBox<>();
        comunicar = new javax.swing.JButton();
        estadoT = new javax.swing.JLabel();
        estadoActual = new javax.swing.JLabel();
        mandarValores = new javax.swing.JButton();
        buscar = new javax.swing.JButton();
        distanciaL = new javax.swing.JLabel();
        limpiar = new javax.swing.JButton();
        fondo = new javax.swing.JLabel();
        grafica = new javax.swing.JPanel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titulo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setText("Balancin Arduino Con PID");
        getContentPane().add(titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 236, 50));
        getContentPane().add(kpS, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, 80, 30));
        getContentPane().add(kiS, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 80, 30));

        kdS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kdSActionPerformed(evt);
            }
        });
        getContentPane().add(kdS, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, 80, 30));

        kp.setText("Kp");
        getContentPane().add(kp, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 30, 30));

        ki.setText("Ki");
        getContentPane().add(ki, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 20, 30));

        kd.setText("Kd");
        getContentPane().add(kd, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 30, 30));

        puertos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        puertos.setText("Indica Puerto :");
        getContentPane().add(puertos, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 120, 50));

        getContentPane().add(puertosCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, 300, -1));

        comunicar.setText("Comunicar");
        comunicar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        comunicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comunicarActionPerformed(evt);
            }
        });
        getContentPane().add(comunicar, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 10, 100, 30));

        estadoT.setText("Estado: ");
        getContentPane().add(estadoT, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 100, -1, -1));

        estadoActual.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        estadoActual.setText("SC");
        getContentPane().add(estadoActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 100, 70, -1));

        mandarValores.setText("Mandar Valores");
        mandarValores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mandarValoresActionPerformed(evt);
            }
        });
        getContentPane().add(mandarValores, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 90, 200, 30));

        buscar.setText("Buscar");
        buscar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        getContentPane().add(buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 50, 100, 40));

        distanciaL.setText("Distancia");
        getContentPane().add(distanciaL, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 210, -1, -1));

        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });
        getContentPane().add(limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 300, -1, -1));
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 840, 540));
        getContentPane().add(grafica, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 660, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comunicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comunicarActionPerformed
        ino = new PanamaHitek_Arduino();
        try {
            ino.arduinoRXTX(puertosCB.getSelectedItem().toString(), 9600, listener);
            cambiarEstadoBueno();
            comunicar.setEnabled(false);
        } catch (ArduinoException ex) {
           cambiarEstadoFallido();
        }
        
    }//GEN-LAST:event_comunicarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    
    }//GEN-LAST:event_formWindowClosing

    private void kdSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kdSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kdSActionPerformed

    private void mandarValoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mandarValoresActionPerformed
       try {
           String kp = kpS.getText().replace(' ', '\0').replace(',','\0');
           String ki = kiS.getText().replace(' ', '\0').replace(',','\0');
           String kd = kdS.getText().replace(' ', '\0').replace(',','\0');
           ino.sendData(kp+","+ki+","+kd);
           
       } catch (ArduinoException | SerialPortException ex) {
           Logger.getLogger(ControlArduino.class.getName()).log(Level.SEVERE, null, ex);
       }
    }//GEN-LAST:event_mandarValoresActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
    
    List<String> ListaAingresar = ino.getSerialPorts();
      puertosCB.removeAllItems();
        for (String ingresar : ListaAingresar) {
            puertosCB.addItem(ingresar);
        }
               
    }//GEN-LAST:event_buscarActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        serieD.clear();
        serieR.clear();
    }//GEN-LAST:event_limpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlArduino.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlArduino.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlArduino.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlArduino.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ControlArduino().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscar;
    private javax.swing.JButton comunicar;
    private javax.swing.JLabel distanciaL;
    private javax.swing.JLabel estadoActual;
    private javax.swing.JLabel estadoT;
    private javax.swing.JLabel fondo;
    private javax.swing.JPanel grafica;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel kd;
    private javax.swing.JTextField kdS;
    private javax.swing.JLabel ki;
    private javax.swing.JTextField kiS;
    private javax.swing.JLabel kp;
    private javax.swing.JTextField kpS;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton mandarValores;
    private javax.swing.JLabel puertos;
    private javax.swing.JComboBox<String> puertosCB;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
